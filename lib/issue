# shellcheck shell=sh
# shellcheck disable=SC2039,3043

# Should be like this.
# gt repo issue add el:admin
# gt repo issue remove user-a
# gt repo issue add user-b

# gt repo issue +el:admin -user-a +user-b
___x_cmd_gt_issue(){
    param:dsl       '
subcmd:
    create          "create issue"
    update          "update issue"
    logs            "get issue logs"
    comment         "comment management"
'
    param:run
    if [ -z "$PARAM_SUBCMD" ]; then
        gt_log warn "Subcmd Not Found."
        ___x_cmd_gt_issue _param_help_doc
        return 1
    fi

    "___x_cmd_gt_issue_$PARAM_SUBCMD" "$@"
}


# shellcheck disable=SC2154,SC2034
___x_cmd_gt_issue_create() {
    param:scope     "gitee/$O"
    param:dsl      '
options:
    --title         "title"                                                              <>
    --repo          "Provide owner name and repo name.(default:the current user repo)"   <>:RepoName
    --body          "issue describe"                                                     <>=""
    --type          "issue type"                                                         <>=""
    --assignee      "assignee space address"                                             <>=""
    --collaborators "collaborators space address"                                        <>=""
    --milestone     "milestone serial number"                                            <>=""
    --labels        "labels"                                                             <>=""
    --program       "project ID"                                                         <>=""
    --security      "is it private"
'
    param:run

    local security="${security:-false}"
    local gen_gt_json
    gen_gt_json="$(param:option2json security_hole=^^security issue_type=type -security -type)"

    ______x_cmd_gt_post "/v5/repos/${repo##*/}/issues" "$gen_gt_json" | (
        ___x_cmd_git_json_query_rename id=.number title=.title html_url=.html_url
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true  "Success" "id: $id" "title: $title" "url: $html_url"
            return 0
        else
            ___x_cmd_ui_tf false "Create issue failure"
            return 1
        fi
    )
}

# shellcheck disable=SC2154,SC2034
___x_cmd_gt_issue_update() {
    param:scope     "gitee/$O"
    param:dsl       '
type:
    State = open progressing closed
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"   <>:RepoName
    --number        "issue number"                                                       <>
    --title         "title"                                                              <>=""
    --state         "issue state "                                                       <>:State
    --body          "issue describe"                                                     <>=""
    --assignee      "assignee space address"                                             <>=""
    --collaborators "collaborators space address"                                        <>=""
    --milestone     "milestone serial number"                                            <>=""
    --labels        "labels"                                                             <>=""
    --program       "project ID"                                                         <>=""
    --security      "is it private"
'
    param:run

    local security="${security:-false}"
    local gen_gt_json
    gen_gt_json="$(param:option2json security_hole=^^security  issue_type=type -security -type)"

    ______x_cmd_gt_patch "/v5/repos/${owner##*/}/issues/${number}" "$gen_gt_json" | (
        ___x_cmd_git_json_query_rename id=.number state=.state html_url=.html_url
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true  "Success" "id: $id" "state: $state" "url: $html_url"
            return 0
        else
            ___x_cmd_ui_tf false "Update issue failure"
            return 1
        fi
    )
}

# shellcheck disable=SC2154
___x_cmd_gt_issue_logs(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"   <>:RepoName
    --number        "issue number"                                                       <>
    --sort          "sort(asc、desc)"                                                    <>="desc"
'
    param:run
    ___x_cmd_gt_param_init_owner_repo

    local gen_gt_json
    gen_gt_json="$(param:option2json -number)"

    if [ -t 1 ]; then
        if ___ui_table_json Time=.created_at User=.user.login Type=.action_type Content=.content \
            -- "______x_cmd_gt_get" "/v5/repos/${owner_repo##*/}/issues/${number}/operate_logs" "$gen_gt_json"; then
            return 0
        fi
    else
        ______x_cmd_gt_get "/v5/repos/${owner_repo##*/}/issues/${number}/operate_logs" "$gen_gt_json" && \
            return 0
    fi
    gt_log error "Couldn't find any data by: $repo $number"
    return 1
}

# shellcheck shell=sh
# shellcheck disable=SC2039,3043,SC2154

___x_cmd_gt_repo_issue() {
    param:scope     "gitee/$O"
    param:dsl       '
type:
    State = open progressing closed rejected all
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"   <>:RepoName
    --state         "issue state"                                                        <>:State=all
    --labels        "labels"                                                             <>=""
    --milestone     "milestone"                                                          <>=""
    --assignee      "assignee"                                                           <>=""
    --creator       "creator"                                                            <>=""
    --program       "program"                                                            <>=""
    --page          "page"                                                               <>:number=1
    --per_page      "per_page"                                                           <>:number=20
    --sort          "sort"                                                               <>="created"
    --direction     "direction"                                                          <>="desc"
    --number        "repo issue number"                                                  <>=""
'
    param:run
    ___x_cmd_gt_param_init_owner_repo

    local gen_gt_json
    gen_gt_json="$(param:option2json -repo -page -per_page)"

    if [ -z "$number" ]; then
        if [ -t 1 ]; then
            if ___ui_table_json IssueNumber=.number Title=.title State=.issue_state Assigner=.assignee.name Body=.body \
                -- "______x_cmd_gt_get_multi" "/v5/repos/${owner_repo}/issues" "$gen_gt_json"; then
                return 0
            fi
        else
            ______x_cmd_gt_get_multi "/v5/repos/${owner_repo}/issues" "$gen_gt_json" && \
                return 0
        fi
        gt_log error "Couldn't find any data by: ${owner_repo}"
        return 1
    else
        ______x_cmd_gt_get "/v5/repos/${owner_repo}/issues/${number}" | (
            ___x_cmd_gt_json_query_rename "$data" id=.number title=.title state=.state assignee=.assignee.name
            if [ -n "$id" ]; then
                ___x_cmd_ui_tf true  "Success" "id: $id" "title: $title" "state: $state" "assignee: $assignee"
                return 0
            else
                ___x_cmd_ui_tf false "Getting repo issue info failure by $owner_repo $number"
                return 1
            fi
        )
    fi
    return
}

# shellcheck disable=SC2154
___x_cmd_gt_org_issue(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --org           "organization path"                            <>
    --filter        "filter(assigned,created,all)"                 <>="assigned"
    --state         "state(open,progerssing,closed,rejected)"      <>="open"
    --labels        "labels"                                       <>=""
    --sort          "sort(created,updated)"                        <>="created"
    --direction     "direction(asc、desc)"                         <>="desc"
    --page          "page"                                         <>:number=1
    --per_page      "per_page"                                     <>:number=20
'
    param:run

    local gen_gt_json
    gen_gt_json="$(param:option2json -org -page -per_page)"

    if [ -t 1 ]; then
        if ___ui_table_json IssueNumber=.number State=.issue_state Assigner=.assignee.name Repository=.repository.full_name Type=.issue_type Title=.title Url=.html_url \
            -- "______x_cmd_gt_get_multi" "/v5/orgs/${org##*/}/issues" filter state labels sort direction since page per_page; then
            return 0
        fi
    else
        ______x_cmd_gt_get_multi "/v5/orgs/${org##*/}/issues" filter state labels sort direction since page per_page && \
            return 0
    fi
    gt_log error "Couldn't find any data by: ${org}"
    return 1

}

# shellcheck disable=SC2154
___x_cmd_gt_enterprise_issue(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --enterprise    "enterprise path"                              <>
    --filter        "filter(assigned,created,all)"                 <>="assigned"
    --state         "state(open,progerssing,closed,rejected)"      <>="open"
    --labels        "labels"                                       <>=""
    --sort          "sort(created,updated)"                        <>="created"
    --direction     "direction(asc、desc)"                         <>="desc"
    --milestone     "milestone"                                    <>=""
    --assignee      "assignee"                                     <>=""
    --creator       "creator"                                      <>=""
    --program       "program"                                      <>=""
    --page          "page"                                         <>:number=1
    --per_page      "per_page"                                     <>:number=50
'
    param:run

    local gen_gt_json
    gen_gt_json="$(param:option2json -enterprise -page -per_page)"

    if [ -t 1 ]; then
        if ___ui_table_json IssueNumber=.number State=.issue_state Assigner=.assignee.name AssignerMarkName=.assignee.remark \
            Repository=.repository.full_name Type=.issue_type Title=.title Url=.html_url \
            -- "______x_cmd_gt_get_multi" "/v5/enterprises/${enterprise##*/}/issues" "$gen_gt_json"; then
            return 0
        fi
    else
        ______x_cmd_gt_get_multi "/v5/enterprises/${enterprise##*/}/issues" "$gen_gt_json" && \
            return 0
    fi
    gt_log error "Couldn't find any data by: ${enterprise}"
    return 1
}

# Section : comment

___x_cmd_gt_issue_comment(){
    param:scope     "gitee/$O"
    param:dsl       '
subcmd:
    ls              "list all comment"
    create          "create a comment"
    update          "update a comment"
    del             "delete a comment"
'
    param:run
    if [ -z "$PARAM_SUBCMD" ]; then
        gt_log warn "subcmd not found. show help." >&2
        ___x_cmd_gt_issue _param_help_doc
        return 1
    fi
    "___x_cmd_gt_issue_comment_$PARAM_SUBCMD" "$@"
}

___x_cmd_gt_issue_comment_ls(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --number        "issue number"                                                       <>
    --repo          "Provide owner name and repo name.(default:the current user repo)"   <>:RepoName
    --since         "since"                                                              <>=""
    --page          "page"                                                               <>=1
    --per_page      "per_page"                                                           <>=100
    --order         "order(asc、desc)"                                                   <>="asc"
'
    param:run
    ___x_cmd_gt_param_init_owner_repo

    local gen_gt_json
    gen_gt_json="$(param:option2json -number -repo -page -per_page)"

    if [ -t 1 ]; then
        if ___ui_table_json CommitId=.id IssueNumber=.target.issue.number Title=.target.issue.title User=.user.login Body=.body \
            -- "______x_cmd_gt_get_multi" "/v5/repos/${owner_repo}/issues/$number/comments" "$gen_gt_json"; then
            return 0
        fi
    else
        ______x_cmd_gt_get_multi "/v5/repos/${owner_repo}/issues/$number/comments" "$gen_gt_json" && \
            return 0
    fi
    gt_log error "Couldn't find any data by: ${owner_repo}"
    return 1
}

# shellcheck disable=SC2086,SC2154
___x_cmd_gt_issue_comment_create(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"   <>:RepoName
    --number        "issue number"                                                       <>
    --body          "The contents of the comment"                                        <>
'
    param:run

    local gen_gt_json
    gen_gt_json="$(param:option2json -repo -number)"

    ______x_cmd_gt_post_json "/v5/repos/${owner##*/}/${repo##*/}/issues/$number/comments" "$(param:option2json)" | (
        ___x_cmd_git_json_query_rename "$data" id=.target.issue.number title=.target.issue.title body=.body
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true  "Success" "Success" "id: $id" "title: $title" "comment_body: $body"
            return 0
        else
            ___x_cmd_ui_tf false "Create Comment failure"
            return 1
        fi
    )
}

___x_cmd_gt_issue_comment_update(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"   <>:RepoName
    --id            "comments id"                                                        <>
    --body          "The contents of the comment"                                        <>
'
    param:run
    local gen_gt_json
    gen_gt_json="$(param:option2json -repo -id)"

    ______x_cmd_gt_patch_json "/v5/repos/${owner##*/}/${repo##*/}/issues/comments/${id}" "$(param:option2json)" | (
        ___x_cmd_git_json_query_rename "$data" id=.target.issue.number title=.target.issue.title body=.body
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true  "Success" "id: $id" "title: $title" "comment_body: $body"
            return 0
        else
            ___x_cmd_ui_tf false "Update Comment failure"
            return 1
        fi
    )
}

# shellcheck disable=SC2181
___x_cmd_gt_issue_comment_del(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"   <>:RepoName
    --id            "comments id"                                                        <>
'
    param:run
    ___x_cmd_gt_param_init_owner_repo
    # TODO:http handle，delete repo return data is null.Status: 204 No Content
    if ______x_cmd_gt_delete "/v5/repos/${owner_repo}/issues/comments/${id}" >/dev/null; then
        ___x_cmd_ui_tf true  "Deleted comment successfully"
    else
        ___x_cmd_ui_tf false "Deleting comment failure by ${owner_repo} $id."
        return 1
    fi
}

# EndSection

